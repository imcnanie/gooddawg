#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p "python39.withPackages(ps: with ps; [ matplotlib numpy ])"

import matplotlib.pyplot as plt
import numpy as np

# Store original LUT data
# link1, link2
#LUT = {-0.43: 3.742822992146237, -0.42: 3.708339059641443, -0.41: 3.6709551986261904, -0.4: 3.6241780909140195, -0.39: 3.592720170767964, -0.38: 3.5417822960625274, -0.37: 3.5130351786545084, -0.36: 3.467581951349287, -0.35: 3.4317741384375435, -0.34: 3.389725175035902, -0.33: 3.345217576592786, -0.32: 3.3107966860121314, -0.31: 3.2678020937483847, -0.3: 3.219259812160283, -0.29: 3.188999688572895, -0.28: 3.1453116351436035, -0.27: 3.0990388628245555, -0.26: 3.0660679364991306, -0.25: 3.014814852172992, -0.24: 2.983419973951077, -0.23: 2.93405814734915, -0.22: 2.8974938313477225, -0.21: 2.8561383291116256, -0.2: 2.8113785629719477, -0.19: 2.7724186538531854, -0.18: 2.731567487010212, -0.17: 2.6795578995943883, -0.16: 2.645893512103419, -0.15: 2.6066183933639553, -0.14: 2.5589586987138184, -0.13: 2.5068230274497143, -0.12: 2.4870278632696317, -0.11: 2.4381073301366873, -0.1: 2.3890607131554624, -0.09: 2.352244229457474, -0.08: 2.303512822096951, -0.07: 2.263670326040223, -0.06: 2.216325841010789, -0.05: 2.1793832734645195, -0.04: 2.127499769896977, -0.03: 2.0933310470128843, -0.02: 2.0428975077005713, -0.01: 2.008791826740619, 0.0: 1.9583582874283056, 0.01: 1.9228026422131246, 0.02: 1.871549557886986, 0.03: 1.8341026549475932, 0.04: 1.7947014523598483, 0.05: 1.7420614457026211, 0.06: 1.7007059434665242, 0.07: 1.6623764535891659, 0.08: 1.610555991945764, 0.09: 1.5739916759443366, 0.1: 1.5248189751148309, 0.11: 1.4881916171892633, 0.12: 1.4383254551942133, 0.13: 1.4028328519031725, 0.14: 1.3496885098528224, 0.15: 1.3155828288928704, 0.16: 1.2704448112083497, 0.17: 1.2314218601654474, 0.18: 1.1831317462739073, 0.19: 1.1366698481824384, 0.2: 1.0974577713671145, 0.21: 1.0423591296684123, 0.22: 1.0189075338881863, 0.23: 0.9726978034932792, 0.24: 0.9196165033670692, 0.25: 0.8828630615932207, 0.26: 0.8395532597087716, 0.27: 0.7984499251692361, 0.28: 0.7509793562915211, 0.29: 0.7216018196420986, 0.3: 0.667637932577923, 0.31: 0.6279845622936167, 0.32: 0.585746473119554, 0.33: 0.5413019166005777, 0.34: 0.4921922576952127, 0.35: 0.46350818221133433, 0.36: 0.4114355528713705, 0.37: 0.37008005063527355, 0.38: 0.3390003820340603, 0.39: 0.28661254307339473, 0.4: 0.25351553289968914, 0.41: 0.19942556198723274, 0.42: 0.17055236073093338, 0.43: 0.11501242556324827, 0.44: 0.08229366693438472, 0.45: 0.03747085887056617, 0.46: -0.0019303437171787339, 0.47: -0.044420600587802915, 0.48: -0.0859652285963209, 0.49: -0.1158471006388667}
LUT = {0.2: 0.8706693843015589, 0.21: 0.8731700238093675, 0.22: 0.8960037321019801, 0.23: 0.9182225290402135, 0.24: 0.9458525458969834, 0.25: 0.970735958704193, 0.26: 1.0018094791454863, 0.27: 1.0200518493254012, 0.28: 1.051412328398738, 0.29: 1.0784274339011286, 0.3: 1.1004822544781943, 0.31: 1.1333185208020409, 0.32: 1.152339778697503, 0.33: 1.1854220095631012, 0.34: 1.207271859688707, 0.35: 1.236336669705695, 0.36: 1.2586784489148042, 0.37: 1.2860625012298226, 0.38: 1.3158652048720654, 0.39: 1.3398467476928524, 0.4: 1.3646071782291862, 0.41: 1.3911303546480738, 0.42: 1.422162880999075, 0.43: 1.4433978197703017, 0.44: 1.4731595293222528, 0.45: 1.5023473216101166, 0.46: 1.5261648880697358, 0.47: 1.5501464308905226, 0.48: 1.582613750401742, 0.49: 1.6038486891729686, 0.5: 1.6351681741560136, 0.51: 1.6524266861689219, 0.52: 1.692190953752107, 0.53: 1.7032183640406398, 0.54: 1.7426546789014894, 0.55: 1.7596262322823542, 0.56: 1.795987990371308, 0.57: 1.8150092482667697, 0.58: 1.8472715973265292, 0.59: 1.872236998314323, 0.6: 1.8951526947875192, 0.61: 1.9241355166239233, 0.62: 1.954799096162297, 0.63: 1.9749681885859336, 0.64: 2.0040329986029213, 0.65: 2.03248289726553, 0.66: 2.057817245065951, 0.67: 2.0837665042207516, 0.68: 2.1115604974386892, 0.69: 2.140133378372174, 0.7: 2.160712411698729, 0.71: 2.1899821921671774, 0.72: 2.2187190494618294, 0.73: 2.242536615921449, 0.74: 2.2719703727510643, 0.75: 2.2982885787184917, 0.76: 2.3234179560674533, 0.77: 2.346948563895029, 0.78: 2.3771202143498993, 0.79: 2.4030284794144077, 0.8: 2.4282398449439526, 0.81: 2.4572226667803565, 0.82: 2.4805892982467648, 0.83: 2.5110889014239706, 0.84: 2.53195489338257, 0.85: 2.564586189254957, 0.86: 2.583484464879543, 0.87: 2.611155475826605, 0.88: 2.6293568519162274, 0.89: 2.6600204314546017, 0.9: 2.6749832744111606, 0.91: 2.692323774604653, 0.92: 2.7114270206806985, 0.93: 2.7282345977003954}

# Extract data from dictionary
commanded_angles = np.array(list(LUT.keys()))
measured_angles = np.array(list(LUT.values()))

# Fit a linear equation
coeffs = np.polyfit(measured_angles, commanded_angles, 1)
slope, intercept = coeffs

# Create smooth curve for plotting
x_smooth = np.linspace(min(measured_angles), max(measured_angles), 200)
y_smooth = slope * x_smooth + intercept

# Print the correction equation
print("\nLinear correction equation:")
print(f"commanded = {slope:.6f}*measured + {intercept:.6f}")

# Create the plot
plt.figure(figsize=(10, 6))
plt.plot(measured_angles, commanded_angles, 'b.', label='Original Data')
plt.plot(x_smooth, y_smooth, 'r-', label='Linear Fit')
plt.plot(measured_angles, measured_angles, 'g--', label='Ideal 1:1 Response')

plt.xlabel('Measured Angle (rad)')
plt.ylabel('Commanded Angle (rad)')
plt.title('Motor Angle Response with Linear Correction')
plt.grid(True)
plt.legend()

# Display the plot
plt.show()
